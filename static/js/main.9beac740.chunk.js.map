{"version":3,"sources":["components/card/card.tsx","components/cardList/cardList.tsx","components/searchBar/searchBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Card","props","react_default","a","createElement","className","src","concat","monster","id","alt","name","email","CardList","monsters","map","card_Card","key","SearchBar","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","setState","searchText","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredMonsters","filter","toLowerCase","includes","searchBar_SearchBar","cardList_cardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oTAcaA,eAA6B,SAACC,GAAD,OAEtCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,wBAAAC,OAA0BN,EAAMO,QAAQC,GAAxC,0BAAoEC,IAAI,YAChFR,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQG,MACnBT,EAAAC,EAAAC,cAAA,UAAKH,EAAMO,QAAQI,UCAZC,SAT4B,SAACZ,GAAD,OAEvCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEXJ,EAAMa,SAASC,IAAI,SAAAP,GAAO,OAAIN,EAAAC,EAAAC,cAACY,EAAD,CAAMC,IAAKT,EAAQC,GAAID,QAASA,SCNzDU,SAAY,SAACjB,GAAD,OACrBC,EAAAC,EAAAC,cAAA,SAAOC,UAAU,aAAac,KAAK,SAASR,KAAK,kBAAkBF,GAAG,OAAOW,YAAY,sBAAsBC,SAAUpB,EAAMoB,aCoCpHC,cAhCb,SAAAA,EAAYrB,GAAiB,IAAAsB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAC3BC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMzB,KAaRoB,SAAW,SAACS,GAAD,OACTP,EAAKQ,SAAS,CACZC,WAAYF,EAAMG,OAAOC,SAd3BX,EAAKY,MAAQ,CACXH,WAAa,GACblB,SAAU,IAJeS,mFAQV,IAAAa,EAAAV,KACnBW,MAAM,8CACJC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKL,SAAS,CAAEjB,SAAU2B,uCAQjC,IAAAC,EAC0BhB,KAAKS,MAA9BrB,EADD4B,EACC5B,SAAUkB,EADXU,EACWV,WACZW,EAAmB7B,EAAS8B,OAAO,SAAApC,GAAO,OAAIA,EAAQG,KAAKkC,cAAcC,SAASd,EAAWa,iBACnG,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,iBACAH,EAAAC,EAAAC,cAAC2C,EAAD,CAAW1B,SAAUK,KAAKL,WAC1BnB,EAAAC,EAAAC,cAAC4C,EAAD,CAAUlC,SAAU6B,YA3BVM,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxB,KAAK,SAAAyB,GACjCA,EAAaC","file":"static/js/main.9beac740.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './card.css';\r\n\r\nexport interface Monster {\r\n    name: string;\r\n    email: string;\r\n    id: number;\r\n}\r\ninterface CardProps {\r\n    monster: Monster;\r\n    children?: React.ReactNode;\r\n}\r\n\r\nexport const Card : React.FC<CardProps> = (props: CardProps) =>\r\n(\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} alt=\"Monster\"/>\r\n        <h1>{props.monster.name}</h1>\r\n        <h4>{props.monster.email}</h4>\r\n    </div>\r\n);\r\n","import React from 'react';\r\nimport { Card, Monster } from '../card/card';\r\n\r\nimport './cardList.css';\r\n\r\ninterface CardListProps {\r\n    monsters: Monster[];\r\n    children?: React.ReactNode;\r\n}\r\n\r\nconst CardList : React.FC<CardListProps> = (props) =>\r\n(\r\n    <div className=\"card-list\">\r\n    {\r\n        props.monsters.map(monster => <Card key={monster.id} monster={monster}/>)\r\n    }\r\n    </div>\r\n);\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nimport './searchBar.css';\r\n\r\ninterface SearchProps {\r\n    onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nexport const SearchBar = (props: SearchProps) => (\r\n    <input className='search-bar' type=\"search\" name=\"Search Monsters\" id=\"name\" placeholder=\"Search for Monsters\" onChange={props.onChange}/>\r\n);","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport CardList from './components/cardList/cardList';\r\nimport { SearchBar } from './components/searchBar/searchBar';\r\nimport { Monster } from './components/card/card';\r\n\r\ninterface AppState {\r\n  searchText: string;\r\n  monsters: Monster[];\r\n}\r\ninterface AppProps {}\r\n\r\nclass App extends Component<AppProps, AppState> {\r\n  constructor(props: AppProps) {\r\n    super(props);\r\n    this.state = {\r\n      searchText : \"\",\r\n      monsters: [],\r\n    }\r\n  }\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then(response => response.json())\r\n\t\t\t.then(users => this.setState({ monsters: users }));\r\n  }\r\n\r\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) =>\r\n    this.setState({\r\n      searchText: event.target.value,\r\n    });\r\n\r\n  render() {\r\n    const { monsters, searchText } = this.state;\r\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchText.toLowerCase()));\r\n    return (\r\n      <div className=\"App\">\r\n        <h1 className=\"App-title\">Monster Index</h1>\r\n        <SearchBar onChange={this.onChange}/>\r\n        <CardList monsters={filteredMonsters}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}